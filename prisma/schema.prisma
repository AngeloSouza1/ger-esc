// app/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")         // pooled (PgBouncer) - runtime da app
  directUrl = env("DIRECT_DATABASE_URL")  // direta - usada pelo Prisma Migrate
}


model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id          String       @id @default(cuid())
  nome        String
  nascimento  DateTime?
  documento   String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  documents   Document[]
  enrollments Enrollment[]

  @@index([nome])
}

model SchoolYear {
  id        String  @id @default(cuid())
  anoLetivo Int
  etapa     String
  classes   Class[]

  @@unique([anoLetivo, etapa])
  @@index([anoLetivo])
}

model Class {
  id           String       @id @default(cuid())
  turma        String
  turno        String
  schoolYearId String
  schoolYear   SchoolYear   @relation(fields: [schoolYearId], references: [id], onDelete: Cascade)
  enrollments  Enrollment[]
  minutes      Minute[]

  @@unique([schoolYearId, turma, turno])
  @@index([schoolYearId])
}

model Subject {
  id                String  @id @default(cuid())
  nome              String
  componenteBncc    String?
  cargaHorariaAnual Int
  grades            Grade[]

  @@unique([nome, cargaHorariaAnual])
  @@index([nome])
}

model Enrollment {
  id                String          @id @default(cuid())
  studentId         String
  classId           String
  frequenciaFinal   Float?
  resultadoFinal    ResultadoFinal?
  cargaHorariaTotal Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  class             Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  student           Student         @relation(fields: [studentId], references: [id], onDelete: Cascade)
  grades            Grade[]
  attendances       Attendance[]    // relação com presenças

  @@unique([studentId, classId])
  @@index([studentId])
  @@index([classId])
}

model Grade {
  id           String        @id @default(cuid())
  enrollmentId String
  subjectId    String
  notaFinal    Float?
  faltas       Int?
  parecer      String?
  enrollment   Enrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  subject      Subject       @relation(fields: [subjectId], references: [id], onDelete: Restrict)
  sources      GradeSource[]

  @@unique([enrollmentId, subjectId])
  @@index([enrollmentId])
  @@index([subjectId])
}

model Minute {
  id             String        @id @default(cuid())
  classId        String
  dataFechamento DateTime
  arquivoUrl     String?
  hash           String        @unique
  createdAt      DateTime      @default(now())
  sources        GradeSource[]
  class          Class         @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@index([classId])
  @@index([dataFechamento])
}

model GradeSource {
  id       String  @id @default(cuid())
  gradeId  String
  minuteId String
  pagina   Int?
  obs      String?
  grade    Grade   @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  minute   Minute  @relation(fields: [minuteId], references: [id], onDelete: Cascade)

  @@unique([gradeId, minuteId])
  @@index([gradeId])
  @@index([minuteId])
}

model Document {
  id        String   @id @default(cuid())
  studentId String
  type      String
  url       String
  hash      String   @unique
  createdAt DateTime @default(now())
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([type])
}

// ======= PRESENÇAS =======

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

model Attendance {
  id           String            @id @default(cuid())
  enrollmentId String
  date         DateTime
  status       AttendanceStatus
  createdAt    DateTime          @default(now())

  enrollment   Enrollment        @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, date]) // evita duplicidade de presença no mesmo dia
  @@index([date])
  @@index([status])
}

// ======= RESULTADO FINAL =======

enum ResultadoFinal {
  APROVADO
  REPROVADO
  APROVADO_CONSELHO
  TRANSFERIDO
}
